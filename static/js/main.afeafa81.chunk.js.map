{"version":3,"sources":["components/Contact/Contact.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","redux/contacts-actions.js","redux/contacts-reduser.js","redux/store.js","components/Container/Container.jsx","components/Form/FormHook.jsx","redux/contacts-selectors.js","components/Contact/Contacts.jsx","components/Filter/Filter.jsx","App.jsx","index.js","components/Form/Form.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","items","createReducer","actions","state","contacts","searchSameName","map","contact","includes","toast","error","checkContact","action","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReduser","devTools","process","persistor","persistStore","Container","children","className","s","container","Form","useState","setName","setNumber","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","form","onSubmit","preventDefault","label","input","type","onChange","pattern","title","required","button","getFilter","getVisibleContact","getContacts","normalizedFilter","toLowerCase","ContactList","useSelector","list","item","onClick","onDeleteContact","Filter","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.afeafa81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contact_list__21Wbl\",\"item\":\"Contact_item__6Po8I\",\"button\":\"Contact_button__1mP7v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2uLAY\",\"title\":\"Filter_title__eLsmm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1071t\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    id: nanoid(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n//redux\r\n// import { nanoid } from 'nanoid';\r\n// import { ADD, DELETE, CHANGE_FILTER } from './contacts-types';\r\n\r\n// export const addContact = task => ({\r\n//   type: ADD,\r\n//   payload: {\r\n//     ...task,\r\n//     id: nanoid(),\r\n//   },\r\n// });\r\n\r\n// export const deleteContact = contactId => ({\r\n//   type: DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// export const changeFilter = value => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport toast from 'react-hot-toast';\r\nimport * as actions from './contacts-actions';\r\n\r\nconst checkContact = (contacts, name) => {\r\n  const searchSameName = contacts.map(contact => contact.name).includes(name);\r\n\r\n  if (searchSameName) {\r\n    toast.error(`${name} is already in contacts`);\r\n    return searchSameName;\r\n  }\r\n};\r\n\r\nconst addContact = (state, { payload }) => {\r\n  const includedContact = checkContact(state, payload.name);\r\n\r\n  if (includedContact) return state;\r\n\r\n  return [...state, payload];\r\n};\r\n\r\nexport const items = createReducer([], {\r\n  [actions.addContact]: addContact,\r\n  [actions.deleteContact]: (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nexport const filter = createReducer('', {\r\n  [actions.changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\n//redux\r\n// import { combineReducers } from 'redux';\r\n// import { ADD, DELETE, CHANGE_FILTER } from './contacts-types';\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       return [...state, payload];\r\n\r\n//     case DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReduser from './contacts-reduser';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactPersistConfig, contactsReduser),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default store;\r\n\r\n// redux\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReduser from './contacts-reduser';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReduser,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import s from 'components/Container/Container.module.css';\r\n\r\nconst Container = ({ children }) => {\r\n  return <section className={s.container}>{children}</section>;\r\n};\r\n\r\nexport default Container;\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addContact } from 'redux/contacts-actions';\r\n\r\nimport s from 'components/Form/Form.module.css';\r\n\r\nfunction Form() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    dispatch(addContact(name, number));\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={s.form} onSubmit={handleSubmit}>\r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Number\r\n          <input\r\n            className={s.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={handleChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button className={s.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContact = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { deleteContact } from 'redux/contacts-actions';\r\nimport { getVisibleContact } from 'redux/contacts-selectors';\r\nimport s from 'components/Contact/Contact.module.css';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContact);\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = id => dispatch(deleteContact(id));\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ name, number, id }) => (\r\n        <li className={s.item} key={id}>\r\n          {name + ': ' + number}\r\n          <button className={s.button} onClick={() => onDeleteContact(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\n//with connect\r\n// import { connect } from 'react-redux';\r\n// import PropTypes from 'prop-types';\r\n// import { deleteContact } from '../../redux/contacts-actions';\r\n// import s from 'components/Contact/Contact.module.css';\r\n\r\n// const ContactList = ({ contacts, onDeleteContact }) => {\r\n//   return (\r\n//     <ul className={s.list}>\r\n//       {contacts.map(({ name, number, id }) => (\r\n//         <li className={s.item} key={id}>\r\n//           {name + ': ' + number}\r\n//           <button className={s.button} onClick={() => onDeleteContact(id)}>\r\n//             Delete\r\n//           </button>\r\n//         </li>\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n// const showVisibleContact = (allContacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return allContacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = state => {\r\n//   const { items, filter } = state.contacts;\r\n//   const visibleContacts = showVisibleContact(items, filter);\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n// ContactList.propTypes = {\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string.isRequired,\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.string.isRequired,\r\n//     }),\r\n//   ),\r\n// };\r\n","import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { changeFilter } from 'redux/contacts-actions';\r\n\r\nimport s from 'components/Filter/Filter.module.css';\r\nimport { getFilter } from 'redux/contacts-selectors';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = e => dispatch(changeFilter(e.currentTarget.value));\r\n  return (\r\n    <div>\r\n      <h3 className={s.title}>Find contacts by name</h3>\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\n//with connect\r\n// import { connect } from 'react-redux';\r\n// import PropTypes from 'prop-types';\r\n// import { changeFilter } from '../../redux/contacts-actions';\r\n// import s from 'components/Filter/Filter.module.css';\r\n\r\n// const Filter = ({ value, onChange }) => {\r\n//   return (\r\n//     <div>\r\n//       <h3 className={s.title}>Find contacts by name</h3>\r\n//       <input\r\n//         className={s.input}\r\n//         type=\"text\"\r\n//         value={value}\r\n//         onChange={onChange}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: e => dispatch(changeFilter(e.currentTarget.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string.isRequired,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n","import { Toaster } from 'react-hot-toast';\n\nimport Container from './components/Container/Container';\nimport Form from './components/Form/FormHook';\nimport ContactList from 'components/Contact/Contacts';\nimport Filter from 'components/Filter/Filter';\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <Toaster />\n        <h1>Phonebook</h1>\n        <Form />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store, { persistor } from 'redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2jCc0\",\"label\":\"Form_label__1hkPx\",\"input\":\"Form_input__1Xhue\",\"button\":\"Form_button__15xBj\"};"],"sourceRoot":""}